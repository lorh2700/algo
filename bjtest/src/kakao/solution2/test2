{"model":{"question":"\u003cstyle type=\"text/css\"\u003e.ps-content-wrapper-v0 div { margin: 0 auto; overflow: auto; } .ps-content-wrapper-v0 div.preheader { display: none; } .ps-content-wrapper-v0 p { white-space: pre-wrap; padding-left: 4px; padding-right: 4px; padding-top: 0px; padding-bottom: 2px; } .ps-content-wrapper-v0 p.section-title { font-weight: bold; padding-bottom: 0px; } .ps-content-wrapper-v0 ol.plain-list, .ps-content-wrapper-v0 ul.plain-list { list-style-type: none; padding: 4px; } .ps-content-wrapper-v0 li { white-space: normal; margin-top: 4px; margin-bottom: 4px; } .ps-content-wrapper-v0 code { color: black; } .ps-content-wrapper-v0 pre { background-color: #f4faff; border: 0; border-radius: 2px; margin: 8px; padding: 10px; } .ps-content-wrapper-v0 pre.scrollable-full-json { overflow-x: scroll; white-space: pre; } .ps-content-wrapper-v0 pre.scrollable-json { height: 300px; overflow-y: scroll; display: inline-grid; white-space: pre-wrap; padding-left: 8px; padding-right: 8px; padding-top: 4px; padding-bottom: 4px; } .ps-content-wrapper-v0 div.equation-parent { width: 400px; text-align: center; border: 1px solid #000; padding: 8px; } .ps-content-wrapper-v0 div.equation-parent.equation { width: 100%; display: inline-block; } .ps-content-wrapper-v0 figure { background-color: transparent; display: table; margin-top: 8px; margin-bottom: 8px; text-align: center; margin-left: auto; margin-right: auto; } .ps-content-wrapper-v0 figcaption { text-align: center; display: table-caption; caption-side: bottom; margin-top: 4px; margin-bottom: 4px; } .ps-content-wrapper-v0 img { width: auto; max-width: 100%; height: auto; } .ps-content-wrapper-v0 details { background-color: transparent; padding-left: 4px; padding-right: 4px; padding-top: 0px; padding-bottom: 2px; } .ps-content-wrapper-v0 details details { padding-left: 8px; padding-right: 8px; } .ps-content-wrapper-v0 details summary { background-color: #39424e; color: white; font-weight: bold; margin-top: 4px; margin-bottom: 4px; padding: 8px; } .ps-content-wrapper-v0 details details summary code { color: black; font-weight: bold; padding-left: 2px; padding-right: 2px; padding-top: 4px; padding-right: 4px; margin-left: 4px; } .ps-content-wrapper-v0 details div.collapsable-details { margin: 0 auto; padding-left: 4px; padding-right: 4px; padding-top: 0px; padding-bottom: 2px; overflow: auto; } .ps-content-wrapper-v0 details div.collapsable-details pre { margin-left: 4px; margin-right: 4px; margin-top: 4px; margin-bottom: 4px; } .ps-content-wrapper-v0 table.normal { border: 1px solid black; border-collapse: collapse; border-color: darkgray; margin: 0 auto; margin-top: 8px; margin-bottom: 8px; padding: 8px; width: 96%; table-layout: fixed; } .ps-content-wrapper-v0 table.normal tbody { display: block; overflow-x: auto; overflow-y: hidden; } .ps-content-wrapper-v0 table.normal tbody tr:first-child th { font-weight: bold; white-space: normal; } .ps-content-wrapper-v0 table.normal tbody tr th, .ps-content-wrapper-v0 table.normal tbody tr td { font-weight: normal; white-space: nowrap; text-align: center; vertical-align: middle; border: 1px solid black; border-color: darkgray; padding: 8px; } .ps-content-wrapper-v0 table.database-table { border-collapse: collapse; border-color: darkgray; border: 1px solid black; width: auto; margin-left: 4px; margin-top: 8px; margin-bottom: 8px; padding: 8px; } .ps-content-wrapper-v0 table.database-table tbody { overflow-x: auto; overflow-y: hidden; border: none; } .ps-content-wrapper-v0 table.database-table tbody tr th, .ps-content-wrapper-v0 table.database-table tbody tr td { font-weight: normal; white-space: nowrap; text-align: center; vertical-align: middle; border: 1px solid black; border-color: darkgray; padding: 8px; } .ps-content-wrapper-v0 table.database-table tbody tr th { font-weight: bold; border: 1px solid black; } .ps-content-wrapper-v0 table.database-table tbody tr:nth-child(2) td { border: 1px solid black; } .ps-content-wrapper-v0 table.database-table tbody tr:nth-child(n+2) td:first-child { border-left-color: black; } .ps-content-wrapper-v0 table.database-table tbody tr:nth-child(n+2) td:last-child { border-right-color: black; } .ps-content-wrapper-v0 table.database-table tbody tr:last-child td { border-bottom-color: black; } .ps-content-wrapper-v0 table.database-table tbody tr td.description { text-align: left; white-space: pre-wrap; } .ps-content-wrapper-v0 table.normal tbody tr th.description { width: 60%; } .ps-content-wrapper-v0 table.function-params tbody tr:first-child td.headers { border-bottom-width: 2px; } .ps-content-wrapper-v0 table.function-params tbody tr:last-child td { border-top-width: 2px; border-top-color: darkgray; } .ps-content-wrapper-v0 table.function-params tbody tr td.headers { width: 25%; font-weight: bold; text-align: center; border: 1px solid black; border-right-width: 2px; border-color: darkgray; } .ps-content-wrapper-v0 table.function-params tbody tr td.params-table-cell { width: 100%; height: 100%; padding: 0px; } .ps-content-wrapper-v0 table.function-params tbody tr td.params-table-cell table.params-table { width: 100%; height: 100%; padding: 0px; margin: 0px; border: 0; } .ps-content-wrapper-v0 table.function-params tbody tr td.params-table-cell table.params-table tbody tr td.code { white-space: normal; } .ps-content-wrapper-v0 table.function-params tbody tr td.params-table-cell table.params-table tbody tr th { border-top: 0; } .ps-content-wrapper-v0 table.function-params tbody tr td.params-table-cell table.params-table tbody tr th:first-child { border-left: 0; } .ps-content-wrapper-v0 table.function-params tbody tr td.params-table-cell table.params-table tbody tr th:last-child { border-right: 0; } .ps-content-wrapper-v0 table.function-params tbody tr td.params-table-cell table.params-table tbody tr:last-child td { border-bottom: 0; border-top-width: 1px; } .ps-content-wrapper-v0 table.function-params tbody tr td.params-table-cell table.params-table tbody tr td:first-child { border-left: 0; } .ps-content-wrapper-v0 table.function-params tbody tr td.params-table-cell table.params-table tbody tr td:last-child { border-right: 0; } .ps-content-wrapper-v0 table.sudoku { border-collapse: collapse; border-color: darkgray; margin: 0 auto; margin-top: 8px; margin-bottom: 8px; padding: 8px; } .ps-content-wrapper-v0 table.sudoku colgroup, tbody { border: 3px solid black; } .ps-content-wrapper-v0 table.sudoku td { border: 1px solid black; height: 25px; width: 25px; text-align: center; padding: 0; } .ps-content-wrapper-v0 .left { text-align: left; } .ps-content-wrapper-v0 .right { text-align: right; } .ps-content-wrapper-v0 .code { font-family: monospace; white-space: nowrap; } .ps-content-wrapper-v0 .json-object-array ol, .ps-content-wrapper-v0 .json-object-array ol ul { margin-top: 0px; padding-left: 14px; } .json-object-array li { float: left; margin-right: 30px; margin-left: 10px; } .json-object-array pre { padding: 4px; margin-left: 0px; }\n\u003c/style\u003e\n\u003cdiv class=\"ps-content-wrapper-v0\"\u003e\n\u003cp\u003eA web developer has set up a local web host on a low-power, single-board computer. The computer also hosts a media server that has a higher priority. Each second of time that the web host has priority, it responds to at most \u003cem\u003e5\u003c/em\u003e requests and deletes them from the queue. Requests are served on a last in, first out basis. Given a list of times that the web host has priority, determine the total number of requests that are served.\u003c/p\u003e\n\n\u003cp\u003e \u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eExample:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cp\u003eThere are a total of \u003cem\u003en = 6 \u003c/em\u003e requests received\u003c/p\u003e\n\n\u003cp\u003e\u003cem\u003etimestamp = [0, 1, 1, 2, 4, 5]\u003c/em\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cem\u003etop = [5]\u003c/em\u003e\u003c/p\u003e\n\n\u003cp\u003e \u003c/p\u003e\n\n\u003cp\u003eThe web server has priority one time at \u003cem\u003etop = 5.\u003c/em\u003e  It can respond to the latest 5 requests through the \u003cem\u003e5\u003csup\u003eth\u003c/sup\u003e\u003c/em\u003e second of time. Those were received from \u003cem\u003etimestamp[1]\u003c/em\u003e through \u003cem\u003etimestamp[5].\u003c/em\u003e  The request from \u003cem\u003etimestamp[0]\u003c/em\u003e is ignored. The total number of requests served is \u003cem\u003e5.\u003c/em\u003e\u003c/p\u003e\n\n\u003cp\u003e \u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eNote:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cp\u003e    \u003c/p\u003e\n\n\u003cul\u003e\n\t\u003cli\u003eThe server may have priority multiple times in a second.\u003c/li\u003e\n\t\u003cli\u003eThe arrays \u003cem\u003etimestamp \u003c/em\u003eand \u003cem\u003etop \u003c/em\u003emay not be in sorted order.\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003e \u003c/p\u003e\n\n\u003cp class=\"section-title\"\u003eFunction Description\u003c/p\u003e\n\n\u003cp\u003eComplete the function \u003cem\u003erequestsServed\u003c/em\u003e in the editor below. The function should return an integer that denotes the total number requests served.\u003c/p\u003e\n\n\u003cp\u003e \u003c/p\u003e\n\n\u003cp\u003e\u003cem\u003erequestsServed\u003c/em\u003e has the following parameters:\u003c/p\u003e\n\n\u003cul\u003e\n\t\u003cli\u003e\n\u003cem\u003etimestamp[timestamp[0],...timestamp[n-1]]:\u003c/em\u003e An array of integers that represent the seconds after \u003cem\u003etime = 0\u003c/em\u003e that the requests arrive\u003c/li\u003e\n\t\u003cli\u003e\n\u003cem\u003etop[top[0]...top[m-1]]:\u003c/em\u003e  An array of integers that represent the seconds after \u003cem\u003etime = 0\u003c/em\u003e that the server has priority\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003e \u003c/p\u003e\n\n\u003cp class=\"section-title\"\u003eConstraints\u003c/p\u003e\n\n\u003cul\u003e\n\t\u003cli\u003e1 ≤ \u003cem\u003en\u003c/em\u003e ≤ 10\u003csup\u003e5\u003c/sup\u003e\n\u003c/li\u003e\n\t\u003cli\u003e1 ≤ \u003cem\u003em\u003c/em\u003e ≤ 30\u003c/li\u003e\n\t\u003cli\u003e0 ≤ \u003cem\u003etimestamp[i]\u003c/em\u003e\u003csub\u003e \u003c/sub\u003e \u0026lt; 60\u003c/li\u003e\n\t\u003cli\u003e0 ≤ \u003cem\u003etop[j]\u003c/em\u003e  \u003cem\u003e\u0026lt; 60\u003c/em\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003e \u003c/p\u003e\n\u003c!-- \u003cStartOfInputFormat\u003e DO NOT REMOVE THIS LINE--\u003e\n\n\u003cdetails\u003e\u003csummary class=\"section-title\"\u003eInput Format For Custom Testing\u003c/summary\u003e\n\n\u003cdiv class=\"collapsable-details\"\u003e\n\u003cp\u003eThe first line contains an integer \u003cem\u003en\u003c/em\u003e, the number of requests received.\u003c/p\u003e\n\n\u003cp\u003eEach of the next \u003cem\u003en \u003c/em\u003elines contains an integer, \u003cem\u003etimestamp[i],\u003c/em\u003e the time in seconds after \u003cem\u003etime = 0\u003c/em\u003e the \u003cem\u003ei\u003csup\u003eth\u003c/sup\u003e\u003c/em\u003e request was received.\u003c/p\u003e\n\n\u003cp\u003eThe next line contains an integer \u003cem\u003em\u003c/em\u003e\u003cem\u003e,\u003c/em\u003e the number of times the server will have priority.\u003c/p\u003e\n\n\u003cp\u003eEach of the next \u003cem\u003em \u003c/em\u003elines​​​​ \u003ci\u003econtains an\u003c/i\u003e integer, \u003cem\u003etop[j]\u003cspan style=\"font-size: 12px;\"\u003e,\u003c/span\u003e\u003c/em\u003e the \u003cem\u003ej\u003csup\u003eth \u003c/sup\u003e\u003c/em\u003etime in seconds after \u003cem\u003etime = 0\u003c/em\u003e the server will have priority.\u003c/p\u003e\n\u003c/div\u003e\n\u003c/details\u003e\n\u003c!-- \u003c/StartOfInputFormat\u003e DO NOT REMOVE THIS LINE--\u003e\n\n\u003cdetails open=\"open\"\u003e\u003csummary class=\"section-title\"\u003eSample Case 0\u003c/summary\u003e\n\n\u003cdiv class=\"collapsable-details\"\u003e\n\u003cp class=\"section-title\"\u003eSample Input For Custom Testing\u003c/p\u003e\n\n\u003cpre\u003e\n10\n1\n2\n2\n3\n4\n5\n6\n6\n13 \n16\n2\n10\n15\n\u003c/pre\u003e\n\n\u003cp class=\"section-title\"\u003eSample Output\u003c/p\u003e\n\n\u003cpre\u003e\n9\u003c/pre\u003e\n\n\u003cp class=\"section-title\"\u003eExplanation\u003c/p\u003e\n\n\u003cp\u003e\u003cem\u003en = 10\u003c/em\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cem\u003etimestamp = [1, 2, 2, 3, 4, 5, 6, 6, 13, 16]\u003c/em\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cem\u003etop = [10, 15]\u003c/em\u003e\u003c/p\u003e\n\n\u003cp\u003e \u003c/p\u003e\n\n\u003cp\u003eThe server receives \u003cem\u003en = 10\u003c/em\u003e requests and has priority \u003cem\u003em = 2\u003c/em\u003e times at \u003cem\u003etop = [10, 15]\u003c/em\u003e seconds after \u003cem\u003etime = 0\u003c/em\u003e. The first time requests are served, at the \u003cem\u003e10\u003csup\u003eth\u003c/sup\u003e\u003c/em\u003e second, the \u003cem\u003e5\u003c/em\u003e requests received at [3, 4, 5, 6, 6] are served and they are deleted from the queue. Now \u003cem\u003etimestamp' = [1, 2, 2, 13, 16].\u003c/em\u003e  The next time the server has priority, in the \u003cem\u003e15\u003csup\u003eth\u003c/sup\u003e\u003c/em\u003e second, it serves the 4 requests received at \u003cem\u003e[1, 2, 2, 13]\u003c/em\u003e respectively and deletes them as well. A total of \u003cem\u003e9\u003c/em\u003e requests were served. Since the server did not have priority after \u003cem\u003etime = 15\u003c/em\u003e, the request received at \u003cem\u003etime = 16\u003c/em\u003e is not served.\u003c/p\u003e\n\u003c/div\u003e\n\u003c/details\u003e\n\n\u003cdetails\u003e\u003csummary class=\"section-title\"\u003eSample Case 1\u003c/summary\u003e\n\n\u003cdiv class=\"collapsable-details\"\u003e\n\u003cp class=\"section-title\"\u003eSample Input For Custom Testing\u003c/p\u003e\n\n\u003cpre\u003e\n7\n​​​​2\n2\n4\n8\n11\n28\n30\n4\n0\n5\n5\n15\n\u003c/pre\u003e\n\n\u003cp class=\"section-title\"\u003eSample Output\u003c/p\u003e\n\n\u003cpre\u003e\n5\u003c/pre\u003e\n\n\u003cp class=\"section-title\"\u003eExplanation\u003c/p\u003e\n\n\u003cp\u003e\u003cem\u003en = 7\u003c/em\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cem\u003etimestamp = [2, 2, 4, 8, 11, 28, 30]\u003c/em\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cem\u003etop = [0, 5, 5, 15]\u003c/em\u003e\u003c/p\u003e\n\n\u003cp\u003e \u003c/p\u003e\n\n\u003cp\u003eThe first time the server has priority in the \u003cem\u003e0\u003csup\u003eth\u003c/sup\u003e\u003c/em\u003e second, there are no pending requests, so none is served.\u003c/p\u003e\n\n\u003cp\u003eThe second time, in the \u003cem\u003e5\u003csup\u003eth\u003c/sup\u003e\u003c/em\u003e second, the \u003cem\u003e3\u003c/em\u003e requests received at\u003cem\u003e [2, 2, 4]\u003c/em\u003e are served.\u003c/p\u003e\n\n\u003cp\u003eThe third time, in the \u003cem\u003e5\u003csup\u003eth\u003c/sup\u003e\u003c/em\u003e second, there are no pending requests, so none is served.\u003c/p\u003e\n\n\u003cp\u003eThe fourth time, in the \u003cem\u003e15\u003csup\u003eth\u003c/sup\u003e\u003c/em\u003e second, the \u003cem\u003e2\u003c/em\u003e requests received at\u003cem\u003e [8, 11]\u003c/em\u003e are served.\u003c/p\u003e\n\n\u003cp\u003eA total of \u003cem\u003e5\u003c/em\u003e requests were served.\u003c/p\u003e\n\u003c/div\u003e\n\u003c/details\u003e\n\n\u003cdetails\u003e\u003csummary class=\"section-title\"\u003eSample Case 2\u003c/summary\u003e\n\n\u003cdiv class=\"collapsable-details\"\u003e\n\u003cp class=\"section-title\"\u003eSample Input For Custom Testing\u003c/p\u003e\n\n\u003cpre\u003e\n17\n0\n0\n​1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n4\n6\n6\n6\n6\n\u003c/pre\u003e\n\n\u003cp class=\"section-title\"\u003eSample Output\u003c/p\u003e\n\n\u003cpre\u003e\n17\u003c/pre\u003e\n\n\u003cp class=\"section-title\"\u003eExplanation\u003c/p\u003e\n\n\u003cp\u003e\u003cem\u003en = 17\u003c/em\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cem\u003etimestamp = [0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]\u003c/em\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cem\u003etop = [6, 6, 6, 6]\u003c/em\u003e\u003c/p\u003e\n\n\u003cp\u003e \u003c/p\u003e\n\n\u003cp\u003eThe server has priority in the \u003cem\u003e6\u003csup\u003eth\u003c/sup\u003e\u003c/em\u003e second, the latest \u003cem\u003e5\u003c/em\u003e of the requests received in the \u003cem\u003e1\u003csup\u003est\u003c/sup\u003e\u003c/em\u003e second are served.\u003c/p\u003e\n\n\u003cp\u003eThe second time, in the \u003cem\u003e6\u003csup\u003eth\u003c/sup\u003e\u003c/em\u003e second, the next \u003cem\u003e5\u003c/em\u003e of the requests received in the \u003cem\u003e1\u003csup\u003est\u003c/sup\u003e\u003c/em\u003e second are served.\u003c/p\u003e\n\n\u003cp\u003eThe third time, in the \u003cem\u003e6\u003csup\u003eth\u003c/sup\u003e\u003c/em\u003e second, the next \u003cem\u003e5\u003c/em\u003e of the requests received in the \u003cem\u003e1\u003csup\u003est\u003c/sup\u003e\u003c/em\u003e second are served.\u003c/p\u003e\n\n\u003cp\u003eThe fourth time, again in the \u003cem\u003e6\u003csup\u003eth\u003c/sup\u003e\u003c/em\u003e second, the \u003cem\u003e2\u003c/em\u003e remaining requests received in the \u003cem\u003e0\u003csup\u003eth\u003c/sup\u003e\u003c/em\u003e second are served.\u003c/p\u003e\n\n\u003cp\u003eA total of \u003cem\u003e17\u003c/em\u003e requests were served.\u003c/p\u003e\n\u003c/div\u003e\n\u003c/details\u003e\n\u003c/div\u003e\n","type":"code","unique_id":"2blct447d26","languages":["c","clojure","cpp","cpp14","csharp","erlang","go","haskell","java","java8","javascript","julia","kotlin","lua","objectivec","perl","php","pypy","pypy3","python","python3","r","ruby","scala","swift"],"name":"Local Web Hosting","hide_compile_test":null,"custom_testcase_allowed":"True","version":46,"sub_type":null,"stubs_present":"False","c_template":"/*\n * Complete the 'requestsServed' function below.\n *\n * The function is expected to return an INTEGER.\n * The function accepts following parameters:\n *  1. INTEGER_ARRAY timestamp\n *  2. INTEGER_ARRAY top\n */\n\nint requestsServed(int timestamp_count, int* timestamp, int top_count, int* top) {\n\n}\n\n","c_template_head":"#include \u003cassert.h\u003e\n#include \u003cctype.h\u003e\n#include \u003climits.h\u003e\n#include \u003cmath.h\u003e\n#include \u003cstdbool.h\u003e\n#include \u003cstddef.h\u003e\n#include \u003cstdint.h\u003e\n#include \u003cstdio.h\u003e\n#include \u003cstdlib.h\u003e\n#include \u003cstring.h\u003e\n\nchar* readline();\nchar* ltrim(char*);\nchar* rtrim(char*);\n\nint parse_int(char*);\n\n","c_template_tail":"int main()\n{\n    FILE* fptr = fopen(getenv(\"OUTPUT_PATH\"), \"w\");\n\n    int timestamp_count = parse_int(ltrim(rtrim(readline())));\n\n    int* timestamp = malloc(timestamp_count * sizeof(int));\n\n    for (int i = 0; i \u003c timestamp_count; i++) {\n        int timestamp_item = parse_int(ltrim(rtrim(readline())));\n\n        *(timestamp + i) = timestamp_item;\n    }\n\n    int top_count = parse_int(ltrim(rtrim(readline())));\n\n    int* top = malloc(top_count * sizeof(int));\n\n    for (int i = 0; i \u003c top_count; i++) {\n        int top_item = parse_int(ltrim(rtrim(readline())));\n\n        *(top + i) = top_item;\n    }\n\n    int result = requestsServed(timestamp_count, timestamp, top_count, top);\n\n    fprintf(fptr, \"%d\\n\", result);\n\n    fclose(fptr);\n\n    return 0;\n}\n\nchar* readline() {\n    size_t alloc_length = 1024;\n    size_t data_length = 0;\n\n    char* data = malloc(alloc_length);\n\n    while (true) {\n        char* cursor = data + data_length;\n        char* line = fgets(cursor, alloc_length - data_length, stdin);\n\n        if (!line) {\n            break;\n        }\n\n        data_length += strlen(cursor);\n\n        if (data_length \u003c alloc_length - 1 || data[data_length - 1] == '\\n') {\n            break;\n        }\n\n        alloc_length \u003c\u003c= 1;\n\n        data = realloc(data, alloc_length);\n\n        if (!data) {\n            data = '\\0';\n\n            break;\n        }\n    }\n\n    if (data[data_length - 1] == '\\n') {\n        data[data_length - 1] = '\\0';\n\n        data = realloc(data, data_length);\n\n        if (!data) {\n            data = '\\0';\n        }\n    } else {\n        data = realloc(data, data_length + 1);\n\n        if (!data) {\n            data = '\\0';\n        } else {\n            data[data_length] = '\\0';\n        }\n    }\n\n    return data;\n}\n\nchar* ltrim(char* str) {\n    if (!str) {\n        return '\\0';\n    }\n\n    if (!*str) {\n        return str;\n    }\n\n    while (*str != '\\0' \u0026\u0026 isspace(*str)) {\n        str++;\n    }\n\n    return str;\n}\n\nchar* rtrim(char* str) {\n    if (!str) {\n        return '\\0';\n    }\n\n    if (!*str) {\n        return str;\n    }\n\n    char* end = str + strlen(str) - 1;\n\n    while (end \u003e= str \u0026\u0026 isspace(*end)) {\n        end--;\n    }\n\n    *(end + 1) = '\\0';\n\n    return str;\n}\n\nint parse_int(char* str) {\n    char* endptr;\n    int value = strtol(str, \u0026endptr, 10);\n\n    if (endptr == str || *endptr != '\\0') {\n        exit(EXIT_FAILURE);\n    }\n\n    return value;\n}\n","clojure_template":";\n; Complete the 'requestsServed' function below.\n;\n; The function is expected to return an INTEGER.\n; The function accepts following parameters:\n;  1. INTEGER_ARRAY timestamp\n;  2. INTEGER_ARRAY top\n;\n\n(defn requestsServed [timestamp top]\n\n)\n\n","clojure_template_head":"\n\n","clojure_template_tail":"(def fptr (get (System/getenv) \"OUTPUT_PATH\"))\n\n(def timestamp-count (Integer/parseInt (clojure.string/trim (read-line))))\n\n(def timestamp [])\n\n(doseq [_ (range timestamp-count)]\n    (def timestamp (conj timestamp (Integer/parseInt (clojure.string/trim (read-line)))))\n)\n\n(def top-count (Integer/parseInt (clojure.string/trim (read-line))))\n\n(def top [])\n\n(doseq [_ (range top-count)]\n    (def top (conj top (Integer/parseInt (clojure.string/trim (read-line)))))\n)\n\n(def result (requestsServed timestamp top))\n\n(spit fptr (str result \"\\n\") :append true)\n","cpp_template":"/*\n * Complete the 'requestsServed' function below.\n *\n * The function is expected to return an INTEGER.\n * The function accepts following parameters:\n *  1. INTEGER_ARRAY timestamp\n *  2. INTEGER_ARRAY top\n */\n\nint requestsServed(vector\u003cint\u003e timestamp, vector\u003cint\u003e top) {\n\n}\n\n","cpp_template_head":"#include \u003cbits/stdc++.h\u003e\n\nusing namespace std;\n\nstring ltrim(const string \u0026);\nstring rtrim(const string \u0026);\n\n","cpp_template_tail":"int main()\n{\n    ofstream fout(getenv(\"OUTPUT_PATH\"));\n\n    string timestamp_count_temp;\n    getline(cin, timestamp_count_temp);\n\n    int timestamp_count = stoi(ltrim(rtrim(timestamp_count_temp)));\n\n    vector\u003cint\u003e timestamp(timestamp_count);\n\n    for (int i = 0; i \u003c timestamp_count; i++) {\n        string timestamp_item_temp;\n        getline(cin, timestamp_item_temp);\n\n        int timestamp_item = stoi(ltrim(rtrim(timestamp_item_temp)));\n\n        timestamp[i] = timestamp_item;\n    }\n\n    string top_count_temp;\n    getline(cin, top_count_temp);\n\n    int top_count = stoi(ltrim(rtrim(top_count_temp)));\n\n    vector\u003cint\u003e top(top_count);\n\n    for (int i = 0; i \u003c top_count; i++) {\n        string top_item_temp;\n        getline(cin, top_item_temp);\n\n        int top_item = stoi(ltrim(rtrim(top_item_temp)));\n\n        top[i] = top_item;\n    }\n\n    int result = requestsServed(timestamp, top);\n\n    fout \u003c\u003c result \u003c\u003c \"\\n\";\n\n    fout.close();\n\n    return 0;\n}\n\nstring ltrim(const string \u0026str) {\n    string s(str);\n\n    s.erase(\n        s.begin(),\n        find_if(s.begin(), s.end(), not1(ptr_fun\u003cint, int\u003e(isspace)))\n    );\n\n    return s;\n}\n\nstring rtrim(const string \u0026str) {\n    string s(str);\n\n    s.erase(\n        find_if(s.rbegin(), s.rend(), not1(ptr_fun\u003cint, int\u003e(isspace))).base(),\n        s.end()\n    );\n\n    return s;\n}\n","cpp14_template":"/*\n * Complete the 'requestsServed' function below.\n *\n * The function is expected to return an INTEGER.\n * The function accepts following parameters:\n *  1. INTEGER_ARRAY timestamp\n *  2. INTEGER_ARRAY top\n */\n\nint requestsServed(vector\u003cint\u003e timestamp, vector\u003cint\u003e top) {\n\n}\n\n","cpp14_template_head":"#include \u003cbits/stdc++.h\u003e\n\nusing namespace std;\n\nstring ltrim(const string \u0026);\nstring rtrim(const string \u0026);\n\n","cpp14_template_tail":"int main()\n{\n    ofstream fout(getenv(\"OUTPUT_PATH\"));\n\n    string timestamp_count_temp;\n    getline(cin, timestamp_count_temp);\n\n    int timestamp_count = stoi(ltrim(rtrim(timestamp_count_temp)));\n\n    vector\u003cint\u003e timestamp(timestamp_count);\n\n    for (int i = 0; i \u003c timestamp_count; i++) {\n        string timestamp_item_temp;\n        getline(cin, timestamp_item_temp);\n\n        int timestamp_item = stoi(ltrim(rtrim(timestamp_item_temp)));\n\n        timestamp[i] = timestamp_item;\n    }\n\n    string top_count_temp;\n    getline(cin, top_count_temp);\n\n    int top_count = stoi(ltrim(rtrim(top_count_temp)));\n\n    vector\u003cint\u003e top(top_count);\n\n    for (int i = 0; i \u003c top_count; i++) {\n        string top_item_temp;\n        getline(cin, top_item_temp);\n\n        int top_item = stoi(ltrim(rtrim(top_item_temp)));\n\n        top[i] = top_item;\n    }\n\n    int result = requestsServed(timestamp, top);\n\n    fout \u003c\u003c result \u003c\u003c \"\\n\";\n\n    fout.close();\n\n    return 0;\n}\n\nstring ltrim(const string \u0026str) {\n    string s(str);\n\n    s.erase(\n        s.begin(),\n        find_if(s.begin(), s.end(), not1(ptr_fun\u003cint, int\u003e(isspace)))\n    );\n\n    return s;\n}\n\nstring rtrim(const string \u0026str) {\n    string s(str);\n\n    s.erase(\n        find_if(s.rbegin(), s.rend(), not1(ptr_fun\u003cint, int\u003e(isspace))).base(),\n        s.end()\n    );\n\n    return s;\n}\n","csharp_template":"class Result\n{\n\n    /*\n     * Complete the 'requestsServed' function below.\n     *\n     * The function is expected to return an INTEGER.\n     * The function accepts following parameters:\n     *  1. INTEGER_ARRAY timestamp\n     *  2. INTEGER_ARRAY top\n     */\n\n    public static int requestsServed(List\u003cint\u003e timestamp, List\u003cint\u003e top)\n    {\n\n    }\n\n}\n\n","csharp_template_head":"using System.CodeDom.Compiler;\nusing System.Collections.Generic;\nusing System.Collections;\nusing System.ComponentModel;\nusing System.Diagnostics.CodeAnalysis;\nusing System.Globalization;\nusing System.IO;\nusing System.Linq;\nusing System.Reflection;\nusing System.Runtime.Serialization;\nusing System.Text.RegularExpressions;\nusing System.Text;\nusing System;\n\n","csharp_template_tail":"class Solution\n{\n    public static void Main(string[] args)\n    {\n        TextWriter textWriter = new StreamWriter(@System.Environment.GetEnvironmentVariable(\"OUTPUT_PATH\"), true);\n\n        int timestampCount = Convert.ToInt32(Console.ReadLine().Trim());\n\n        List\u003cint\u003e timestamp = new List\u003cint\u003e();\n\n        for (int i = 0; i \u003c timestampCount; i++)\n        {\n            int timestampItem = Convert.ToInt32(Console.ReadLine().Trim());\n            timestamp.Add(timestampItem);\n        }\n\n        int topCount = Convert.ToInt32(Console.ReadLine().Trim());\n\n        List\u003cint\u003e top = new List\u003cint\u003e();\n\n        for (int i = 0; i \u003c topCount; i++)\n        {\n            int topItem = Convert.ToInt32(Console.ReadLine().Trim());\n            top.Add(topItem);\n        }\n\n        int result = Result.requestsServed(timestamp, top);\n\n        textWriter.WriteLine(result);\n\n        textWriter.Flush();\n        textWriter.Close();\n    }\n}\n","erlang_template":"%\n% Complete the 'requestsServed' function below.\n%\n% The function is expected to return an INTEGER.\n% The function accepts following parameters:\n%  1. INTEGER_ARRAY timestamp\n%  2. INTEGER_ARRAY top\n%\n\nrequestsServed(Timestamp, Top) -\u003e\n    % Write your code here\n\n","erlang_template_head":"-module(solution).\n-export([main/0]).\n-import(os, [getenv/1]).\n\n","erlang_template_tail":"read_multiple_lines_as_list_of_strings(N) -\u003e\n    read_multiple_lines_as_list_of_strings(N, []).\n\nread_multiple_lines_as_list_of_strings(0, Acc) -\u003e\n    lists:reverse(Acc);\nread_multiple_lines_as_list_of_strings(N, Acc) when N \u003e 0 -\u003e\n    read_multiple_lines_as_list_of_strings(N - 1, [re:replace(io:get_line(\"\"), \"(\\\\r\\\\n$)|(\\\\n$)\", \"\", [global, {return, list}]) | Acc]).\n\nmain() -\u003e\n    {ok, Fptr} = file:open(getenv(\"OUTPUT_PATH\"), [write]),\n\n    {TimestampCount, _} = string:to_integer(re:replace(io:get_line(\"\"), \"(^\\\\s+)|(\\\\s+$)\", \"\", [global, {return, list}])),\n\n    TimestampTemp = read_multiple_lines_as_list_of_strings(TimestampCount),\n\n    Timestamp = lists:map(fun(X) -\u003e {I, _} = string:to_integer(re:replace(X, \"(^\\\\s+)|(\\\\s+$)\", \"\", [global, {return, list}])), I end, TimestampTemp),\n\n    {TopCount, _} = string:to_integer(re:replace(io:get_line(\"\"), \"(^\\\\s+)|(\\\\s+$)\", \"\", [global, {return, list}])),\n\n    TopTemp = read_multiple_lines_as_list_of_strings(TopCount),\n\n    Top = lists:map(fun(X) -\u003e {I, _} = string:to_integer(re:replace(X, \"(^\\\\s+)|(\\\\s+$)\", \"\", [global, {return, list}])), I end, TopTemp),\n\n    Result = requestsServed(Timestamp, Top),\n\n    io:fwrite(Fptr, \"~w~n\", [Result]),\n\n    file:close(Fptr),\n\n    ok.\n","go_template":"/*\n * Complete the 'requestsServed' function below.\n *\n * The function is expected to return an INTEGER.\n * The function accepts following parameters:\n *  1. INTEGER_ARRAY timestamp\n *  2. INTEGER_ARRAY top\n */\n\nfunc requestsServed(timestamp []int32, top []int32) int32 {\n    // Write your code here\n\n}\n\n","go_template_head":"package main\n\nimport (\n    \"bufio\"\n    \"fmt\"\n    \"io\"\n    \"os\"\n    \"strconv\"\n    \"strings\"\n)\n\n","go_template_tail":"func main() {\n    reader := bufio.NewReaderSize(os.Stdin, 16 * 1024 * 1024)\n\n    stdout, err := os.Create(os.Getenv(\"OUTPUT_PATH\"))\n    checkError(err)\n\n    defer stdout.Close()\n\n    writer := bufio.NewWriterSize(stdout, 16 * 1024 * 1024)\n\n    timestampCount, err := strconv.ParseInt(strings.TrimSpace(readLine(reader)), 10, 64)\n    checkError(err)\n\n    var timestamp []int32\n\n    for i := 0; i \u003c int(timestampCount); i++ {\n        timestampItemTemp, err := strconv.ParseInt(strings.TrimSpace(readLine(reader)), 10, 64)\n        checkError(err)\n        timestampItem := int32(timestampItemTemp)\n        timestamp = append(timestamp, timestampItem)\n    }\n\n    topCount, err := strconv.ParseInt(strings.TrimSpace(readLine(reader)), 10, 64)\n    checkError(err)\n\n    var top []int32\n\n    for i := 0; i \u003c int(topCount); i++ {\n        topItemTemp, err := strconv.ParseInt(strings.TrimSpace(readLine(reader)), 10, 64)\n        checkError(err)\n        topItem := int32(topItemTemp)\n        top = append(top, topItem)\n    }\n\n    result := requestsServed(timestamp, top)\n\n    fmt.Fprintf(writer, \"%d\\n\", result)\n\n    writer.Flush()\n}\n\nfunc readLine(reader *bufio.Reader) string {\n    str, _, err := reader.ReadLine()\n    if err == io.EOF {\n        return \"\"\n    }\n\n    return strings.TrimRight(string(str), \"\\r\\n\")\n}\n\nfunc checkError(err error) {\n    if err != nil {\n        panic(err)\n    }\n}\n","haskell_template":"--\n-- Complete the 'requestsServed' function below.\n--\n-- The function is expected to return an INTEGER.\n-- The function accepts following parameters:\n--  1. INTEGER_ARRAY timestamp\n--  2. INTEGER_ARRAY top\n--\n\nrequestsServed timestamp top = do\n    -- Write your code here\n\n","haskell_template_head":"{-# LANGUAGE DuplicateRecordFields, FlexibleInstances, UndecidableInstances #-}\n\nmodule Main where\n\nimport Control.Monad\nimport Data.Array\nimport Data.Bits\nimport Data.List\nimport Data.List.Split\nimport Data.Set\nimport Data.Text\nimport Debug.Trace\nimport System.Environment\nimport System.IO\nimport System.IO.Unsafe\n\n","haskell_template_tail":"lstrip = Data.Text.unpack . Data.Text.stripStart . Data.Text.pack\nrstrip = Data.Text.unpack . Data.Text.stripEnd . Data.Text.pack\n\nreadMultipleLinesAsStringArray :: Int -\u003e IO [String]\nreadMultipleLinesAsStringArray 0 = return []\nreadMultipleLinesAsStringArray n = do\n    line \u003c- getLine\n    rest \u003c- readMultipleLinesAsStringArray(n - 1)\n    return (line : rest)\n\nmain :: IO()\nmain = do\n    stdout \u003c- getEnv \"OUTPUT_PATH\"\n    fptr \u003c- openFile stdout WriteMode\n\n    timestampCountTemp \u003c- getLine\n    let timestampCount = read $ lstrip $ rstrip timestampCountTemp :: Int\n\n    timestampTemp \u003c- readMultipleLinesAsStringArray timestampCount\n    let timestamp = Data.List.map (read :: String -\u003e Int) timestampTemp\n\n    topCountTemp \u003c- getLine\n    let topCount = read $ lstrip $ rstrip topCountTemp :: Int\n\n    topTemp \u003c- readMultipleLinesAsStringArray topCount\n    let top = Data.List.map (read :: String -\u003e Int) topTemp\n\n    let result = requestsServed timestamp top\n\n    hPutStrLn fptr $ show result\n\n    hFlush fptr\n    hClose fptr\n","java_template":"class Result {\n\n    /*\n     * Complete the 'requestsServed' function below.\n     *\n     * The function is expected to return an INTEGER.\n     * The function accepts following parameters:\n     *  1. INTEGER_ARRAY timestamp\n     *  2. INTEGER_ARRAY top\n     */\n\n    public static int requestsServed(List\u003cInteger\u003e timestamp, List\u003cInteger\u003e top) {\n    // Write your code here\n\n    }\n\n}\n\n","java_template_head":"import java.io.*;\nimport java.math.*;\nimport java.security.*;\nimport java.text.*;\nimport java.util.*;\nimport java.util.concurrent.*;\nimport java.util.regex.*;\n\n","java_template_tail":"public class Solution {\n    public static void main(String[] args) throws IOException {\n        BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(System.in));\n        BufferedWriter bufferedWriter = new BufferedWriter(new FileWriter(System.getenv(\"OUTPUT_PATH\")));\n\n        int timestampCount = Integer.parseInt(bufferedReader.readLine().trim());\n\n        List\u003cInteger\u003e timestamp = new ArrayList\u003c\u003e();\n\n        for (int i = 0; i \u003c timestampCount; i++) {\n            int timestampItem = Integer.parseInt(bufferedReader.readLine().trim());\n            timestamp.add(timestampItem);\n        }\n\n        int topCount = Integer.parseInt(bufferedReader.readLine().trim());\n\n        List\u003cInteger\u003e top = new ArrayList\u003c\u003e();\n\n        for (int i = 0; i \u003c topCount; i++) {\n            int topItem = Integer.parseInt(bufferedReader.readLine().trim());\n            top.add(topItem);\n        }\n\n        int result = Result.requestsServed(timestamp, top);\n\n        bufferedWriter.write(String.valueOf(result));\n        bufferedWriter.newLine();\n\n        bufferedReader.close();\n        bufferedWriter.close();\n    }\n}\n","java8_template":"class Result {\n\n    /*\n     * Complete the 'requestsServed' function below.\n     *\n     * The function is expected to return an INTEGER.\n     * The function accepts following parameters:\n     *  1. INTEGER_ARRAY timestamp\n     *  2. INTEGER_ARRAY top\n     */\n\n    public static int requestsServed(List\u003cInteger\u003e timestamp, List\u003cInteger\u003e top) {\n    // Write your code here\n\n    }\n\n}\n\n","java8_template_head":"import java.io.*;\nimport java.math.*;\nimport java.security.*;\nimport java.text.*;\nimport java.util.*;\nimport java.util.concurrent.*;\nimport java.util.function.*;\nimport java.util.regex.*;\nimport java.util.stream.*;\nimport static java.util.stream.Collectors.joining;\nimport static java.util.stream.Collectors.toList;\n\n","java8_template_tail":"public class Solution {\n    public static void main(String[] args) throws IOException {\n        BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(System.in));\n        BufferedWriter bufferedWriter = new BufferedWriter(new FileWriter(System.getenv(\"OUTPUT_PATH\")));\n\n        int timestampCount = Integer.parseInt(bufferedReader.readLine().trim());\n\n        List\u003cInteger\u003e timestamp = IntStream.range(0, timestampCount).mapToObj(i -\u003e {\n            try {\n                return bufferedReader.readLine().replaceAll(\"\\\\s+$\", \"\");\n            } catch (IOException ex) {\n                throw new RuntimeException(ex);\n            }\n        })\n            .map(String::trim)\n            .map(Integer::parseInt)\n            .collect(toList());\n\n        int topCount = Integer.parseInt(bufferedReader.readLine().trim());\n\n        List\u003cInteger\u003e top = IntStream.range(0, topCount).mapToObj(i -\u003e {\n            try {\n                return bufferedReader.readLine().replaceAll(\"\\\\s+$\", \"\");\n            } catch (IOException ex) {\n                throw new RuntimeException(ex);\n            }\n        })\n            .map(String::trim)\n            .map(Integer::parseInt)\n            .collect(toList());\n\n        int result = Result.requestsServed(timestamp, top);\n\n        bufferedWriter.write(String.valueOf(result));\n        bufferedWriter.newLine();\n\n        bufferedReader.close();\n        bufferedWriter.close();\n    }\n}\n","javascript_template":"/*\n * Complete the 'requestsServed' function below.\n *\n * The function is expected to return an INTEGER.\n * The function accepts following parameters:\n *  1. INTEGER_ARRAY timestamp\n *  2. INTEGER_ARRAY top\n */\n\nfunction requestsServed(timestamp, top) {\n    // Write your code here\n\n}\n\n","javascript_template_head":"'use strict';\n\nconst fs = require('fs');\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', function(inputStdin) {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', function() {\n    inputString = inputString.split('\\n');\n\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n","javascript_template_tail":"function main() {\n    const ws = fs.createWriteStream(process.env.OUTPUT_PATH);\n\n    const timestampCount = parseInt(readLine().trim(), 10);\n\n    let timestamp = [];\n\n    for (let i = 0; i \u003c timestampCount; i++) {\n        const timestampItem = parseInt(readLine().trim(), 10);\n        timestamp.push(timestampItem);\n    }\n\n    const topCount = parseInt(readLine().trim(), 10);\n\n    let top = [];\n\n    for (let i = 0; i \u003c topCount; i++) {\n        const topItem = parseInt(readLine().trim(), 10);\n        top.push(topItem);\n    }\n\n    const result = requestsServed(timestamp, top);\n\n    ws.write(result + '\\n');\n\n    ws.end();\n}\n","julia_template":"#\n# Complete the 'requestsServed' function below.\n#\n# The function is expected to return an INTEGER.\n# The function accepts following parameters:\n#  1. INTEGER_ARRAY timestamp\n#  2. INTEGER_ARRAY top\n#\n\nfunction requestsServed(timestamp, top)\n    # Write your code here\n\nend\n\n","julia_template_head":"\n\n","julia_template_tail":"fptr = open(ENV[\"OUTPUT_PATH\"], \"w\")\n\ntimestamp_count = parse(Int32, strip(readline(stdin)))\n\ntimestamp = Array{Int32, 1}()\n\nfor _ = 1:timestamp_count\n    timestamp_item = parse(Int32, strip(readline(stdin)))\n    push!(timestamp, timestamp_item)\nend\n\ntop_count = parse(Int32, strip(readline(stdin)))\n\ntop = Array{Int32, 1}()\n\nfor _ = 1:top_count\n    top_item = parse(Int32, strip(readline(stdin)))\n    push!(top, top_item)\nend\n\nresult = requestsServed(timestamp, top)\n\nwrite(fptr, string(result) * \"\\n\")\n\nclose(fptr)\n","kotlin_template":"/*\n * Complete the 'requestsServed' function below.\n *\n * The function is expected to return an INTEGER.\n * The function accepts following parameters:\n *  1. INTEGER_ARRAY timestamp\n *  2. INTEGER_ARRAY top\n */\n\nfun requestsServed(timestamp: Array\u003cInt\u003e, top: Array\u003cInt\u003e): Int {\n    // Write your code here\n\n}\n\n","kotlin_template_head":"import java.io.*\nimport java.math.*\nimport java.security.*\nimport java.text.*\nimport java.util.*\nimport java.util.concurrent.*\nimport java.util.function.*\nimport java.util.regex.*\nimport java.util.stream.*\nimport kotlin.collections.*\nimport kotlin.comparisons.*\nimport kotlin.io.*\nimport kotlin.jvm.*\nimport kotlin.jvm.functions.*\nimport kotlin.jvm.internal.*\nimport kotlin.ranges.*\nimport kotlin.sequences.*\nimport kotlin.text.*\n\n","kotlin_template_tail":"fun main(args: Array\u003cString\u003e) {\n    val timestampCount = readLine()!!.trim().toInt()\n\n    val timestamp = Array\u003cInt\u003e(timestampCount, { 0 })\n    for (i in 0 until timestampCount) {\n        val timestampItem = readLine()!!.trim().toInt()\n        timestamp[i] = timestampItem\n    }\n\n    val topCount = readLine()!!.trim().toInt()\n\n    val top = Array\u003cInt\u003e(topCount, { 0 })\n    for (i in 0 until topCount) {\n        val topItem = readLine()!!.trim().toInt()\n        top[i] = topItem\n    }\n\n    val result = requestsServed(timestamp, top)\n\n    println(result)\n}\n","lua_template":"--\n-- Complete the 'requestsServed' function below.\n--\n-- The function is expected to return an INTEGER.\n-- The function accepts following parameters:\n--  1. INTEGER_ARRAY timestamp\n--  2. INTEGER_ARRAY top\n--\n\nfunction requestsServed(timestamp, top)\n    -- Write your code here\n\nend\n\n","lua_template_head":"\n\n","lua_template_tail":"local fptr = io.open(os.getenv(\"OUTPUT_PATH\"), \"w\")\n\nlocal timestampcount = io.stdin:read(\"*n\", \"*l\")\n\nlocal timestamp = {}\n\nfor i = 1, timestampcount do\n    timestamp[i] = io.stdin:read(\"*n\", \"*l\")\nend\n\nlocal topcount = io.stdin:read(\"*n\", \"*l\")\n\nlocal top = {}\n\nfor i = 1, topcount do\n    top[i] = io.stdin:read(\"*n\", \"*l\")\nend\n\nlocal result = requestsServed(timestamp, top)\n\nfptr:write(result, \"\\n\")\n\nfptr:close()\n","objectivec_template":"@interface Solution:NSObject\n- (NSNumber *) requestsServed:(NSArray *)timestamp top:(NSArray *)top;\n@end\n\n@implementation Solution\n/*\n * Complete the 'requestsServed' function below.\n *\n * The function is expected to return an INTEGER.\n * The function accepts following parameters:\n *  1. INTEGER_ARRAY timestamp\n *  2. INTEGER_ARRAY top\n */\n\n- (NSNumber *) requestsServed:(NSArray *)timestamp top:(NSArray *)top {\n    // Write your code here\n\n}\n\n@end\n\n","objectivec_template_head":"#import \u003cFoundation/Foundation.h\u003e\n#import \u003cobjc/Object.h\u003e\n#import \u003cobjc/objc.h\u003e\n\n@interface NSString (NumberFromString)\n- (NSNumber *) numberFromString:(NSNumberFormatter *)formatter;\n@end\n\n@implementation NSString (NumberFromString)\n- (NSNumber *) numberFromString:(NSNumberFormatter *)formatter {\n    NSNumber *number = [formatter numberFromString:[self stringByTrimmingCharactersInSet:[NSCharacterSet whitespaceAndNewlineCharacterSet]]];\n\n    if (number == nil) {\n        [NSException raise:@\"Bad Input\" format:@\"%@\", self];\n    }\n\n    return number;\n}\n@end\n\n","objectivec_template_tail":"int main(int argc, const char* argv[]) {\n    @autoreleasepool {\n        NSString *stdout = [[[NSProcessInfo processInfo] environment] objectForKey:@\"OUTPUT_PATH\"];\n        [[NSFileManager defaultManager] createFileAtPath:stdout contents:nil attributes:nil];\n        NSFileHandle *fileHandle = [NSFileHandle fileHandleForWritingAtPath:stdout];\n\n        NSNumberFormatter *numberFormatter = [[NSNumberFormatter alloc] init];\n\n        NSData *availableInputData = [[NSFileHandle fileHandleWithStandardInput] availableData];\n        NSString *availableInputString = [[NSString alloc] initWithData:availableInputData encoding:NSUTF8StringEncoding];\n        NSArray *availableInputArray = [availableInputString componentsSeparatedByString:@\"\\n\"];\n\n        NSUInteger currentInputLine = 0;\n\n        NSUInteger timestampCount = [[[[availableInputArray objectAtIndex:currentInputLine] stringByTrimmingCharactersInSet:[NSCharacterSet whitespaceAndNewlineCharacterSet]] numberFromString:numberFormatter] integerValue];\n        currentInputLine += 1;\n\n        NSArray *timestampTemp = [availableInputArray subarrayWithRange:NSMakeRange(currentInputLine, timestampCount)];\n        currentInputLine += timestampCount;\n\n        NSMutableArray *timestampTempMutable = [NSMutableArray arrayWithCapacity:timestampCount];\n\n        for (NSString *timestampItem in timestampTemp) {\n            [timestampTempMutable addObject:[timestampItem numberFromString:numberFormatter]];\n        }\n\n        NSArray *timestamp = [timestampTempMutable copy];\n\n        NSUInteger topCount = [[[[availableInputArray objectAtIndex:currentInputLine] stringByTrimmingCharactersInSet:[NSCharacterSet whitespaceAndNewlineCharacterSet]] numberFromString:numberFormatter] integerValue];\n        currentInputLine += 1;\n\n        NSArray *topTemp = [availableInputArray subarrayWithRange:NSMakeRange(currentInputLine, topCount)];\n        currentInputLine += topCount;\n\n        NSMutableArray *topTempMutable = [NSMutableArray arrayWithCapacity:topCount];\n\n        for (NSString *topItem in topTemp) {\n            [topTempMutable addObject:[topItem numberFromString:numberFormatter]];\n        }\n\n        NSArray *top = [topTempMutable copy];\n\n        NSNumber *result = [[[Solution alloc] init] requestsServed:timestamp top:top];\n\n        [fileHandle writeData:[[result stringValue] dataUsingEncoding:NSUTF8StringEncoding]];\n        [fileHandle writeData:[@\"\\n\" dataUsingEncoding:NSUTF8StringEncoding]];\n\n        [fileHandle closeFile];\n    }\n\n    return 0;\n}\n","perl_template":"#\n# Complete the 'requestsServed' function below.\n#\n# The function is expected to return an INTEGER.\n# The function accepts following parameters:\n#  1. INTEGER_ARRAY timestamp\n#  2. INTEGER_ARRAY top\n#\n\nsub requestsServed {\n    # Write your code here\n\n}\n\n","perl_template_head":"#!/usr/bin/perl\n\nuse strict;\nuse warnings;\n\n","perl_template_tail":"open(my $fptr, '\u003e', $ENV{'OUTPUT_PATH'});\n\nmy $timestamp_count = ltrim(rtrim(my $timestamp_count_temp = \u003cSTDIN\u003e));\n\nmy @timestamp = ();\n\nfor (1..$timestamp_count) {\n    my $timestamp_item = ltrim(rtrim(my $timestamp_item_temp = \u003cSTDIN\u003e));\n    push @timestamp, $timestamp_item;\n}\n\nmy $top_count = ltrim(rtrim(my $top_count_temp = \u003cSTDIN\u003e));\n\nmy @top = ();\n\nfor (1..$top_count) {\n    my $top_item = ltrim(rtrim(my $top_item_temp = \u003cSTDIN\u003e));\n    push @top, $top_item;\n}\n\nmy $result = requestsServed \\@timestamp, \\@top;\n\nprint $fptr \"$result\\n\";\n\nclose $fptr;\n\nsub ltrim {\n    my $str = shift;\n\n    $str =~ s/^\\s+//;\n\n    return $str;\n}\n\nsub rtrim {\n    my $str = shift;\n\n    $str =~ s/\\s+$//;\n\n    return $str;\n}\n","php_template":"/*\n * Complete the 'requestsServed' function below.\n *\n * The function is expected to return an INTEGER.\n * The function accepts following parameters:\n *  1. INTEGER_ARRAY timestamp\n *  2. INTEGER_ARRAY top\n */\n\nfunction requestsServed($timestamp, $top) {\n    // Write your code here\n\n}\n\n","php_template_head":"\u003c?php\n\n","php_template_tail":"$fptr = fopen(getenv(\"OUTPUT_PATH\"), \"w\");\n\n$timestamp_count = intval(trim(fgets(STDIN)));\n\n$timestamp = array();\n\nfor ($i = 0; $i \u003c $timestamp_count; $i++) {\n    $timestamp_item = intval(trim(fgets(STDIN)));\n    $timestamp[] = $timestamp_item;\n}\n\n$top_count = intval(trim(fgets(STDIN)));\n\n$top = array();\n\nfor ($i = 0; $i \u003c $top_count; $i++) {\n    $top_item = intval(trim(fgets(STDIN)));\n    $top[] = $top_item;\n}\n\n$result = requestsServed($timestamp, $top);\n\nfwrite($fptr, $result . \"\\n\");\n\nfclose($fptr);\n","pypy_template":"#\n# Complete the 'requestsServed' function below.\n#\n# The function is expected to return an INTEGER.\n# The function accepts following parameters:\n#  1. INTEGER_ARRAY timestamp\n#  2. INTEGER_ARRAY top\n#\n\ndef requestsServed(timestamp, top):\n    # Write your code here\n\n","pypy_template_head":"#!/bin/python\n\nimport math\nimport os\nimport random\nimport re\nimport sys\n\n","pypy_template_tail":"if __name__ == '__main__':\n    fptr = open(os.environ['OUTPUT_PATH'], 'w')\n\n    timestamp_count = int(raw_input().strip())\n\n    timestamp = []\n\n    for _ in xrange(timestamp_count):\n        timestamp_item = int(raw_input().strip())\n        timestamp.append(timestamp_item)\n\n    top_count = int(raw_input().strip())\n\n    top = []\n\n    for _ in xrange(top_count):\n        top_item = int(raw_input().strip())\n        top.append(top_item)\n\n    result = requestsServed(timestamp, top)\n\n    fptr.write(str(result) + '\\n')\n\n    fptr.close()\n","pypy3_template":"#\n# Complete the 'requestsServed' function below.\n#\n# The function is expected to return an INTEGER.\n# The function accepts following parameters:\n#  1. INTEGER_ARRAY timestamp\n#  2. INTEGER_ARRAY top\n#\n\ndef requestsServed(timestamp, top):\n    # Write your code here\n\n","pypy3_template_head":"#!/bin/python3\n\nimport math\nimport os\nimport random\nimport re\nimport sys\n\n","pypy3_template_tail":"if __name__ == '__main__':\n    fptr = open(os.environ['OUTPUT_PATH'], 'w')\n\n    timestamp_count = int(input().strip())\n\n    timestamp = []\n\n    for _ in range(timestamp_count):\n        timestamp_item = int(input().strip())\n        timestamp.append(timestamp_item)\n\n    top_count = int(input().strip())\n\n    top = []\n\n    for _ in range(top_count):\n        top_item = int(input().strip())\n        top.append(top_item)\n\n    result = requestsServed(timestamp, top)\n\n    fptr.write(str(result) + '\\n')\n\n    fptr.close()\n","python_template":"#\n# Complete the 'requestsServed' function below.\n#\n# The function is expected to return an INTEGER.\n# The function accepts following parameters:\n#  1. INTEGER_ARRAY timestamp\n#  2. INTEGER_ARRAY top\n#\n\ndef requestsServed(timestamp, top):\n    # Write your code here\n\n","python_template_head":"#!/bin/python\n\nimport math\nimport os\nimport random\nimport re\nimport sys\n\n","python_template_tail":"if __name__ == '__main__':\n    fptr = open(os.environ['OUTPUT_PATH'], 'w')\n\n    timestamp_count = int(raw_input().strip())\n\n    timestamp = []\n\n    for _ in xrange(timestamp_count):\n        timestamp_item = int(raw_input().strip())\n        timestamp.append(timestamp_item)\n\n    top_count = int(raw_input().strip())\n\n    top = []\n\n    for _ in xrange(top_count):\n        top_item = int(raw_input().strip())\n        top.append(top_item)\n\n    result = requestsServed(timestamp, top)\n\n    fptr.write(str(result) + '\\n')\n\n    fptr.close()\n","python3_template":"#\n# Complete the 'requestsServed' function below.\n#\n# The function is expected to return an INTEGER.\n# The function accepts following parameters:\n#  1. INTEGER_ARRAY timestamp\n#  2. INTEGER_ARRAY top\n#\n\ndef requestsServed(timestamp, top):\n    # Write your code here\n\n","python3_template_head":"#!/bin/python3\n\nimport math\nimport os\nimport random\nimport re\nimport sys\n\n","python3_template_tail":"if __name__ == '__main__':\n    fptr = open(os.environ['OUTPUT_PATH'], 'w')\n\n    timestamp_count = int(input().strip())\n\n    timestamp = []\n\n    for _ in range(timestamp_count):\n        timestamp_item = int(input().strip())\n        timestamp.append(timestamp_item)\n\n    top_count = int(input().strip())\n\n    top = []\n\n    for _ in range(top_count):\n        top_item = int(input().strip())\n        top.append(top_item)\n\n    result = requestsServed(timestamp, top)\n\n    fptr.write(str(result) + '\\n')\n\n    fptr.close()\n","r_template":"#\n# Complete the 'requestsServed' function below.\n#\n# The function is expected to return an INTEGER.\n# The function accepts following parameters:\n#  1. INTEGER_ARRAY timestamp\n#  2. INTEGER_ARRAY top\n#\n\nrequestsServed \u003c- function(timestamp, top) {\n    # Write your code here\n\n}\n\n","r_template_head":"\n\n","r_template_tail":"stdin \u003c- file('stdin')\nopen(stdin)\n\nfptr \u003c- file(Sys.getenv(\"OUTPUT_PATH\"))\nopen(fptr, open = \"w\")\n\ntimestampCount \u003c- as.integer(trimws(readLines(stdin, n = 1, warn = FALSE), which = \"both\"))\ntimestamp \u003c- readLines(stdin, n = timestampCount, warn = FALSE)\ntimestamp \u003c- trimws(timestamp, which = \"both\")\ntimestamp \u003c- as.integer(timestamp)\n\ntopCount \u003c- as.integer(trimws(readLines(stdin, n = 1, warn = FALSE), which = \"both\"))\ntop \u003c- readLines(stdin, n = topCount, warn = FALSE)\ntop \u003c- trimws(top, which = \"both\")\ntop \u003c- as.integer(top)\n\nresult \u003c- requestsServed(timestamp, top)\n\nwriteLines(as.character(result), con = fptr)\n\nclose(stdin)\nclose(fptr)\n","ruby_template":"#\n# Complete the 'requestsServed' function below.\n#\n# The function is expected to return an INTEGER.\n# The function accepts following parameters:\n#  1. INTEGER_ARRAY timestamp\n#  2. INTEGER_ARRAY top\n#\n\ndef requestsServed(timestamp, top)\n    # Write your code here\n\nend\n\n","ruby_template_head":"#!/bin/ruby\n\nrequire 'json'\nrequire 'stringio'\n\n","ruby_template_tail":"fptr = File.open(ENV['OUTPUT_PATH'], 'w')\n\ntimestamp_count = gets.strip.to_i\n\ntimestamp = Array.new(timestamp_count)\n\ntimestamp_count.times do |i|\n    timestamp_item = gets.strip.to_i\n    timestamp[i] = timestamp_item\nend\n\ntop_count = gets.strip.to_i\n\ntop = Array.new(top_count)\n\ntop_count.times do |i|\n    top_item = gets.strip.to_i\n    top[i] = top_item\nend\n\nresult = requestsServed timestamp, top\n\nfptr.write result\nfptr.write \"\\n\"\n\nfptr.close()\n","scala_template":"object Result {\n\n    /*\n     * Complete the 'requestsServed' function below.\n     *\n     * The function is expected to return an INTEGER.\n     * The function accepts following parameters:\n     *  1. INTEGER_ARRAY timestamp\n     *  2. INTEGER_ARRAY top\n     */\n\n    def requestsServed(timestamp: Array[Int], top: Array[Int]): Int = {\n\n    }\n\n}\n\n","scala_template_head":"import java.io._\nimport java.math._\nimport java.security._\nimport java.text._\nimport java.util._\nimport java.util.concurrent._\nimport java.util.function._\nimport java.util.regex._\nimport java.util.stream._\nimport scala.collection.immutable._\nimport scala.collection.mutable._\nimport scala.collection.concurrent._\nimport scala.concurrent._\nimport scala.io._\nimport scala.math._\nimport scala.sys._\nimport scala.util.matching._\nimport scala.reflect._\n\n","scala_template_tail":"object Solution {\n    def main(args: Array[String]) {\n        val printWriter = new PrintWriter(sys.env(\"OUTPUT_PATH\"))\n\n        val timestampCount = StdIn.readLine.trim.toInt\n\n        val timestamp = Array.ofDim[Int](timestampCount)\n\n        for (i \u003c- 0 until timestampCount) {\n            val timestampItem = StdIn.readLine.trim.toInt\n            timestamp(i) = timestampItem\n        }\n\n        val topCount = StdIn.readLine.trim.toInt\n\n        val top = Array.ofDim[Int](topCount)\n\n        for (i \u003c- 0 until topCount) {\n            val topItem = StdIn.readLine.trim.toInt\n            top(i) = topItem\n        }\n\n        val result = Result.requestsServed(timestamp, top)\n\n        printWriter.println(result)\n\n        printWriter.close()\n    }\n}\n","swift_template":"/*\n * Complete the 'requestsServed' function below.\n *\n * The function is expected to return an INTEGER.\n * The function accepts following parameters:\n *  1. INTEGER_ARRAY timestamp\n *  2. INTEGER_ARRAY top\n */\n\nfunc requestsServed(timestamp: [Int], top: [Int]) -\u003e Int {\n    // Write your code here\n\n}\n\n","swift_template_head":"import Foundation\n\n","swift_template_tail":"let stdout = ProcessInfo.processInfo.environment[\"OUTPUT_PATH\"]!\nFileManager.default.createFile(atPath: stdout, contents: nil, attributes: nil)\nlet fileHandle = FileHandle(forWritingAtPath: stdout)!\n\nguard let timestampCount = Int((readLine()?.trimmingCharacters(in: .whitespacesAndNewlines))!)\nelse { fatalError(\"Bad input\") }\n\nvar timestamp = [Int]()\n\nfor _ in 1...timestampCount {\n    guard let timestampItem = Int((readLine()?.trimmingCharacters(in: .whitespacesAndNewlines))!)\n    else { fatalError(\"Bad input\") }\n\n    timestamp.append(timestampItem)\n}\n\nguard timestamp.count == timestampCount else { fatalError(\"Bad input\") }\n\nguard let topCount = Int((readLine()?.trimmingCharacters(in: .whitespacesAndNewlines))!)\nelse { fatalError(\"Bad input\") }\n\nvar top = [Int]()\n\nfor _ in 1...topCount {\n    guard let topItem = Int((readLine()?.trimmingCharacters(in: .whitespacesAndNewlines))!)\n    else { fatalError(\"Bad input\") }\n\n    top.append(topItem)\n}\n\nguard top.count == topCount else { fatalError(\"Bad input\") }\n\nlet result = requestsServed(timestamp: timestamp, top: top)\n\nfileHandle.write(String(result).data(using: .utf8)!)\nfileHandle.write(\"\\n\".data(using: .utf8)!)\n","solve":{"answer":{"code":"\nclass Result {\n\n    /*\n     * Complete the 'requestsServed' function below.\n     *\n     * The function is expected to return an INTEGER.\n     * The function accepts following parameters:\n     *  1. INTEGER_ARRAY timestamp\n     *  2. INTEGER_ARRAY top\n     */\n\n    public static int search(List\u003cInteger\u003e a, int n, int key) {\n        int idx = 0;\n        \n        for(int val : a) {\n            if(val \u003e key) return idx;\n            idx++;\n        }\n        \n        return idx;\n    }\n\n    public static int requestsServed(List\u003cInteger\u003e timestamp, List\u003cInteger\u003e top) {\n       // Write your code here\n        //int[] arr = timestamp.toArray(new int[timestamp.size()]);\n                System.out.println(timestamp);\n        System.out.println(top);\n        Collections.sort(timestamp);\n        \n        int[] live = new int[timestamp.size()];\n        Arrays.fill(live, 1);\n        \n        int result = 0, cnt = 0, r;\n        for(int i=0; i\u003ctop.size(); i++) {\n            r = search(timestamp, timestamp.size(), top.get(i));\n            \n            System.out.println(\"\\nt: \"+top.get(i)+\" ,r: \"+r);\n            \n            cnt = 0;\n            for(int j=r-1; j\u003e=0 \u0026 cnt\u003c5; j--) {\n                System.out.print(\"j: \"+j+\", val: \"+timestamp.get(j));\n                if(live[j] == 1 \u0026\u0026 timestamp.get(j) \u003c= top.get(i)) {\n                    result++; \n                    live[j] = 0;\n                    cnt++;\n                    System.out.print(\"=\u003e OK\");\n                }\n                System.out.println();\n            }\n        }\n        \n        return result;\n    }\n\n}\n","language":"java8"}},"nextqid":"2stk0norq7b","prevqid":"fk0oponj8p8","qno":2,"has_samples":true,"file_tree":null,"total_test_cases_count":15,"sample_test_cases_count":4,"projects_instructions":null,"firepad_url":"https://hrcandidate.firebaseio.com/5d2a5e89f215af14f994cf48b35d7005f5d44013","token":"eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ2IjowLCJpYXQiOjE1ODU1Nzc1NDUsImQiOnsidWlkIjoiNWQyYTVlODlmMjE1YWYxNGY5OTRjZjQ4YjM1ZDcwMDVmNWQ0NDAxMyIsInNsdWciOiI1ZDJhNWU4OWYyMTVhZjE0Zjk5NGNmNDhiMzVkNzAwNWY1ZDQ0MDEzIn19.g1T2Mn9XO6zJQvvj6_i32TYONzie3M7eqQmBcAH09Mg","first_sample_input":"10\n1\n2\n2\n3\n4\n5\n6\n6\n13\n16\n2\n10\n15\n"}}